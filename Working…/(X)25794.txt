#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>

//초콜릿 ㅋ나이트 25794
using namespace std;

int x,y;
int dx[8],dy[8];
int X=0,Y=0;

struct posi {
 int x,y;
};
vector<posi> nocho;

int posisame(posi a,posi b){
	if(a.x==b.x)
		if(a.y==b.y)
			return 1;
	return 0;
}
posi makeposi(int a,int b) {
	posi p;
	p.x=a;
	p.y=b;
	return p;
}

struct bfs{
    vector<posi> HanbyeolEatChoco;
    int nowx,nowy;
    int ChocoCount=0;
    

}tempbfs;

bfs makebfs(bfs source, int nowx, int nowy, posi newposi) {

	source.nowx=nowx;
	source.nowy=nowy;
	source.HanbyeolEatChoco.push_back(newposi);
	source.ChocoCount++;
	
	return source;
}

queue<bfs> BFS;

void print(bfs b) {
	printf("%d\n",b.ChocoCount);
	for(int i=1;i<b.ChocoCount;i++) {
		printf("%d %d\n",b.HanbyeolEatChoco[i].x,b.HanbyeolEatChoco[i].y);
	}
	printf("%d %d",b.nowx,b.nowy);
}

int main() {
   // freopen("input.txt","rt",stdin);

    scanf("%d %d",&x,&y);
    
    int arr1[]={x,x,-x,-x,y,y,-y,-y};
    int arr2[]={y,-y,y,-y,x,-x,x,-x};
    
    for(int i=0; i<8; i++) {
        dx[i]=arr1[i];
        dy[i]=arr2[i];
    }


    
    while(1) {

        tempbfs=BFS.front();
        BFS.pop();

		int nowx=tempbfs.nowx;
		int nowy=tempbfs.nowy;
	    //tempbfs.HanbyeolEatChoco.push_back(makeposi(nowx,nowy));

		
			

        int D=0;
        for(int d=0; d<8; d++) {
			
			int dd=0;

			for(int i=0; i<tempbfs.ChocoCount;i++) {
				if(posisame(tempbfs.HanbyeolEatChoco[i],makeposi(nowx+dx[d],nowy+dy[d]))==1) {
					dd++;
					break;
				}
					
			}
			
			if(dd==0) {
				BFS.push(makebfs(tempbfs,nowx+dx[d],nowy+dy[d],makeposi(nowx,nowy)));
			} else {
				D++;
			}
            
            
        }
		//print(tempbfs);
		if(D==8) {
			print(tempbfs);
			//printf("%d",tempbfs.ChocoCount);
			return 0;
		}

        
    }       

    

    return 0;
}